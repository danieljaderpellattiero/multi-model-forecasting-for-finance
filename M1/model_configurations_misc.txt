[V0]

- ENC + LSTM
- 4 time steps delay (tensor slices from 4th to 10th)

        data_source = keras.Input(shape=(encoder.input.shape[1],), name='data_source')
        encoder_layer = encoder(data_source)
        lstm_input = keras.layers.Reshape(target_shape=(encoder_layer.shape[1], 1),
                                          input_shape=encoder_layer.shape, name='lstm_input')(encoder_layer)
        lstm_l1 = keras.layers.LSTM(10, activation=self.__activation_functions[0], return_sequences=True,
                                    name='lstm_1')(lstm_input)
        lstm_4ts_delay = keras.layers.Lambda(lambda tensor: tensor[:, -7:, :], name='lstm_delay')(lstm_l1)
        lstm_output = keras.layers.LSTM(1, activation=self.__activation_functions[1], return_sequences=False,
                                        name='lstm_output')(lstm_4ts_delay)
        self.__model = keras.Model(data_source, lstm_output, name='SAEs-LSTM')

------------------------------------------------------------------------------------------

[V1]

- ENC + LSTM

        data_source = keras.Input(shape=(encoder.input.shape[1],), name='data_source')
        encoder_layer = encoder(data_source)
        lstm_input = keras.layers.Reshape(target_shape=(encoder_layer.shape[1], 1),
                                          input_shape=encoder_layer.shape, name='lstm_input')(encoder_layer)
        lstm_l1 = keras.layers.LSTM(10, activation=self.__activation_functions[0], return_sequences=True,
                                    name='lstm_1')(lstm_input)
        lstm_output = keras.layers.LSTM(1, activation=self.__activation_functions[1], return_sequences=False,
                                        name='lstm_output')(lstm_l1)
        self.__model = keras.Model(data_source, lstm_output, name='SAEs-LSTM')

------------------------------------------------------------------------------------------

[V2] *THE CHOSEN ONE*

- ENC + LSTM + DEC

        data_source = keras.Input(shape=(encoder.input.shape[1],), name='data_source')
        encoder_layer = encoder(data_source)
        lstm_input = keras.layers.Reshape(target_shape=(encoder_layer.shape[1], 1),
                                          input_shape=encoder_layer.shape, name='lstm_input')(encoder_layer)
        lstm_l1 = keras.layers.LSTM(10, activation=self.__activation_functions[0], return_sequences=True,
                                    name='lstm_1')(lstm_input)
        lstm_l2 = keras.layers.LSTM(1, activation=self.__activation_functions[1], return_sequences=True,
                                        name='lstm_2')(lstm_l1)
        decoder_layer = decoder(lstm_l2)
        lstm_output = keras.layers.Lambda(lambda tensor: tensor[:, -1], name='lstm_output')(decoder_layer)
        self.__model = keras.Model(data_source, lstm_output, name='SAEs-LSTM')

------------------------------------------------------------------------------------------

[V3]

- ENC + LSTM + DEC

	(ENC + DEC frozen after test run 1)

        data_source = keras.Input(shape=(encoder.input.shape[1],), name='data_source')
        encoder_layer = encoder(data_source)
        lstm_input = keras.layers.Reshape(target_shape=(encoder_layer.shape[1], 1),
                                          input_shape=encoder_layer.shape, name='lstm_input')(encoder_layer)
        lstm_l1 = keras.layers.LSTM(10, activation=self.__activation_functions[0], return_sequences=True,
                                    name='lstm_1')(lstm_input)
        lstm_l2 = keras.layers.LSTM(1, activation=self.__activation_functions[1], return_sequences=True,
                                        name='lstm_2')(lstm_l1)
        decoder_layer = decoder(lstm_l2)
        lstm_output = keras.layers.Lambda(lambda tensor: tensor[:, -1], name='lstm_output')(decoder_layer)
        self.__model = keras.Model(data_source, lstm_output, name='SAEs-LSTM')

------------------------------------------------------------------------------------------
